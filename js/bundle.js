!function(e){var t={};function s(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class n{constructor(){this._progress=0}set progress(e){this._progress=e}get progress(){return this._progress}}const r=e=>{const t=document.createElement("template");return t.innerHTML=e.trim(),t.content};class i{constructor(){if(new.target===i)throw new Error("Can't instantiate AbstractView, only concrete one")}get template(){throw new Error("Template is required")}get element(){return this._element||(this._element=this.render(),this.bind()),this._element}render(){return r(this.template)}bind(){}}class o extends i{constructor(e){super(),this.model=e}get template(){return`\n    <div class='progress'>\n      <span class="progress__text">${this.model.progress}%</span>\n      <div class="progress__meter"></div>\n    </div>\n  `}bind(){this.progressMeter=this.element.querySelector(".progress__meter"),this.progressText=this.element.querySelector(".progress__text")}changeProgress(e){this.progressMeter.style.width=`${e}%`,this.progressText.innerText=`${Math.ceil(e)}%`,this.onProgressChange(e)}onProgressChange(){}}class a{constructor(){this._input="\n    function (n = 100) {\n      let sum = 0;\n        for (let i = 0; i < n; i++) {\n          sum += i;\n        }\n      return sum;\n    }\n    "}get input(){return this._input}set input(e){this._input=e}}class l extends i{constructor(e,t){super(),this.model=e,this._id=t}get template(){return`\n      <div class="textarea">\n        <h2><label class="textarea__label" for="textarea-${this._id}">Code ${this._id}</label></h2>\n        <textarea class="textarea__input" id="textarea-${this._id}" cols="30" rows="10" placeholder="Type your code here">${this.model.input}</textarea>\n      </div>\n    `}bind(){this.textarea=this.element.querySelector(".textarea"),this.textarea.addEventListener("input",()=>{this.onInput(this.textarea.value)})}onInput(){}}class u extends i{constructor(){super(),this._results=0}get template(){return'\n      <section class="display">\n        <div class="display__wrapper">\n          <div>\n            <label class="display__label" for="iterations">Iterations</label>\n            <select class="display__select" name="iterations" id="iterations">\n              <option value="10">10</option>\n              <option value="100">100</option>\n              <option value="1000">1 000</option>\n              <option value="10000">10 000</option>\n            </select>\n          </div>\n          <div class="display__controls">\n            <button class="button display__button" id="run-button">Run test</button>\n            <button class="button button--cancel button--disabled display__button" id="cancel-button" disabled>Cancel</button>\n          </div>\n        </div>\n        \n        <div class="display__results">\n          <p class="display__text">Average execution time:</p>  \n        </div>\n      </section>\n    '}bind(){this.results=this.element.querySelector(".display__results"),this.runButton=this.element.querySelector("#run-button"),this.cancelButton=this.element.querySelector("#cancel-button"),this.iterationsSelect=this.element.querySelector("#iterations"),this.runButton.addEventListener("click",e=>{e.preventDefault(),this.onRun()}),this.cancelButton.addEventListener("click",e=>{e.preventDefault(),this.onCancel()})}addResultField(){this._results++;const e=`\n      <p class="display__text">\n        <span>Code ${this._results}: </span><span class="display__result" id="result-${this._results}"></span>\n      </p>\n    `;this.results.appendChild(r(e))}changeResults(...e){const t=[...this.results.querySelectorAll('[id^="result"]')];for(let s=0;s<t.length;s++)t[s].innerText=e[s]?`${e[s].toFixed(3)} ms`:""}enableRunButton(){this.runButton.disabled=!1,this.runButton.classList.remove("button--disabled"),this.cancelButton.disabled=!0,this.cancelButton.classList.add("button--disabled")}disableRunButton(){this.runButton.disabled=!0,this.runButton.classList.add("button--disabled"),this.cancelButton.disabled=!1,this.cancelButton.classList.remove("button--disabled")}onRun(){}onCancel(){}}const c=function(e){return function(...t){const s=performance.now();return{result:e.call(null,...t),time:performance.now()-s}}};let d=null;const h=(e,t,s,n,r)=>{let i,o=1,a=[],l=0;const u=100/(t*=e.length),c=Math.ceil(1/u);for(let t=0;t<e.length;t++)a[t]=[];const h=()=>{l>e.length-1&&(l=0);try{i=e[l]()}catch(e){clearTimeout(d),r()}i&&(o%c==0&&s(o*u),a[l].push(i)),o<t&&i?(d=setTimeout(h,0),l++,o++):n(a)};return d=setTimeout(h,0),a},p=e=>{let t=[];for(let s of e)t.push(s.time);return(e=>e.reduce((e,t)=>e+t,0)/e.length)(t)};const _=new class{constructor(){this._textareaNumber=0}showProgressBar(){const e=document.querySelector(".display__controls");this.progressModel=new n,this.progressView=new o(this.progressModel),this.progressView.onProgressChange=(e=>{this.progressModel.progress=e}),e.appendChild(this.progressView.element)}showTextarea(e){const t=document.querySelector(".page-main__inputs");this._textareaNumber++,this.displayView.addResultField(),this[`textareaModel${this._textareaNumber}`]=new a,this[`textareaView${this._textareaNumber}`]=new l(this[`textareaModel${this._textareaNumber}`],e),(e=>{this[`textareaView${this._textareaNumber}`].onInput=(t=>{this[`textareaModel${e}`].input=t})})(this._textareaNumber),t.appendChild(this[`textareaView${this._textareaNumber}`].element)}showDisplay(){const e=document.querySelector(".page-main");this.displayView=new u,this.displayView.onRun=(()=>{const e=[];for(let t=1;t<=this._textareaNumber;t++){const s=this[`textareaView${t}`],n=this[`textareaView${t}`].model.input;e.push(this.executeInput.bind(s,n))}const t=this.displayView.iterationsSelect.value,s=this.progressView.changeProgress.bind(this.progressView);this.displayView.disableRunButton(),h(e,t,s,([...e])=>{this.displayView.enableRunButton(),this.displayView.changeResults(...e.map(p))},()=>{this.progressView.changeProgress(0)})}),this.displayView.onCancel=(()=>{clearTimeout(d),this.displayView.enableRunButton(),this.progressView.changeProgress(0),this.displayView.changeResults()}),e.appendChild(this.displayView.element)}executeInput(e,t){let s=null;e||(e="() => ({})");const n=new Function(`return (${e})(${t})`);try{s=c(n)()}catch(e){throw new Error("Cant create new function")}return s}};_.showDisplay(),_.showProgressBar(),_.showTextarea(1),_.showTextarea(2)}]);